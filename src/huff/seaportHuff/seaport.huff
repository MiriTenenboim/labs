
#define macro NAME() = takes (0) returns (2) {
    0x20
    0x20
    mstore

    0x47
    0x07536561706f7274
    mstore

    0x20
    0x60
    return
}

#define macro MAIN() = takes(0) returns(0) {
    // store dynamic offset of 0x20 at 0x00
    0x20                                     // PUSH1      [0x20]
    0x00                                     // PUSH1      [0x00, 0x20]
    mstore                                   // MSTORE     []
    // write here

    NAME()

    // 0x80
    // 0x40
    // mstore
    // callvalue - read the msg.value
    // dup1
    // iszero - checks if money has been entered in msg.value
    // 0x0e
    // jumpi - jump to the address in the stack - 0x0e
    // push0
    // dup1
    // revert
    // jumpdest - address 0x0e
    // pop
    // 0x3e
    // dup1 
    // 0x1a
    // push0
    // codecopy - copy the bytecode of the constructor - deploy bytecode
    // push0
    // return 
    // invalid
    // 0x80
    // 0x40
    // mstore
    // push0
    // dup1
    // revert
    // invalid
    // log2
    // 0x6970667358
    // invalid
    // slt
    // keccak256
    // swap12
    // 0x776f61c63775c031f58dd946179262215200dd9d3dc11d4011254ce9b0
    // invalid
    // 0x736f6c6343
    // stop
    // addmod
    // xor
    // stop
    // caller

}